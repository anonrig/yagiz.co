---
import type { CollectionEntry } from 'astro:content'
import { getEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import BlogFooter from '@/components/BlogFooter.astro'
import BlogRow from '@/components/BlogRow.astro'
import BlogStickyHeader from '@/components/BlogStickyHeader.astro'
import { components } from '@/components/mdx'
import Container from '@/components/ui/Container.astro'
import Figure from '@/components/ui/Figure.astro'
import Heading from '@/components/ui/Heading.astro'
import Prose from '@/components/ui/Prose.astro'
import Layout from '@/layouts/Layout.astro'
import type { GetStaticPaths } from 'astro'
import { compareDesc, format } from 'date-fns'
import readingTime from 'reading-time/lib/reading-time.js'

interface Props {
  post: CollectionEntry<'blog'>
}

export async function getStaticPaths(): Promise<ReturnType<GetStaticPaths>> {
  const posts = await getCollection('blog', ({ data }) => data.status === 'published')
  posts.sort((a, b) => compareDesc(a.data.date, b.data.date))

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }))
}

const { post } = Astro.props
const { Content } = await post.render()
const tag = await getEntry(post.data.tag.collection, post.data.tag.slug)
const minute_to_read = readingTime(post.body).text

const posts = await getCollection('blog', ({ data }) => data.status === 'published')
posts.sort((a, b) => compareDesc(a.data.date, b.data.date))
const index = posts.findIndex((p) => p.slug === post.slug)
const suggestions = [posts.at(index - 2), posts.at(index - 1)].filter(
  Boolean,
) as CollectionEntry<'blog'>[]
const publishedTime = format(post.data.date, 'yyyy-mm-dd')
const modifiedTime = format(new Date(), 'yyyy-mm-dd')
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={`${Astro.url.origin}/${post.slug}/opengraph-image.png`}
  article={{
    authors: ["Yagiz Nizipli"],
    publishedTime,
    modifiedTime,
    tags: [tag.data.title],
  }}
>
  <Fragment slot="head">
    <script
      type="application/ld+json"
      set:html={JSON.stringify(post.data.structuredData)}
      is:inline
    />
  </Fragment>
  <article>
    <header class="mb-6 grid grid-cols-canvas text-center">
      <div
        class="col-main mb-4 text-xs font-extrabold uppercase text-slate-400"
      >
        <span>
          <time datetime={post.data.date.toISOString()}>
            {
              new Intl.DateTimeFormat("en-US", {
                month: "short",
                day: "numeric",
                year: "numeric",
              }).format(post.data.date)
            }
          </time>
        </span>
        <span class="before:px-2 before:font-serif before:leading-[1] before:content-['·']">
          {minute_to_read}
        </span>
        <span class="before:px-2 before:font-serif before:leading-[1] before:content-['·']">
          <a
            href={`/tag/${post.data.tag.slug}`}
            class="text-orange-400 hover:text-orange-300"
          >
            {tag.data.title}
          </a>
        </span>
      </div>

      <Heading>{post.data.title}</Heading>

      {
        post.data.image && (
          <Figure
            alt={post.data.title}
            src={post.data.image.src}
            caption={post.data.image.alt}
          />
        )
      }
    </header>
    <BlogStickyHeader {post} />
    <Prose>
      <Content {components} />
    </Prose>
    <BlogFooter {index} />
  </article>

  {
    suggestions.length > 0 && (
      <section class="mt-24 bg-[#f6f6f6] dark:bg-[#2f333c] py-12">
        <Container size="tight">
          <h3 class="mb-4 text-xl font-extrabold dark:text-white">
            You might also like...
          </h3>
          <div class="divide-y divide-slate-200 dark:divide-neutral-700">
            {suggestions.map((post) => (
              <BlogRow {post} />
            ))}
          </div>
        </Container>
      </section>
    )
  }
</Layout>
